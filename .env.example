# ============================================================================
# GitHub API Configuration
# ============================================================================
# Personal Access Token (Classic) for accessing GitHub's REST API
# Required for: Fetching repository metadata, file contents, and commit history
#
# How to create:
# 1. Go to https://github.com/settings/tokens
# 2. Click "Generate new token (classic)"
# 3. Select scopes: 'public_repo' (for public repositories)
# 4. Copy the generated token here
#
# Security: Keep this token secure. Never commit it to git.
# Rate limits: Authenticated requests get 5,000 requests/hour vs 60 for unauthenticated
GITHUB_TOKEN=your_github_personal_access_token_here

# ============================================================================
# Google Gemini API Configuration
# ============================================================================
# API key for Google's Gemini AI model
# Required for: AI-powered code analysis and malicious pattern detection
#
# How to create:
# 1. Go to https://aistudio.google.com/app/apikey
# 2. Create a new API key
# 3. Copy the key here
#
# Security: Keep this key secure. Never commit it to git.
# Costs: Gemini API has usage-based pricing. Monitor your usage at https://console.cloud.google.com/
# Rate limits: Default is 60 requests per minute (may vary by tier)
GEMINI_API_KEY=your_gemini_api_key_here

# ============================================================================
# Auth0 Configuration (User Authentication)
# ============================================================================
# Auth0 provides authentication via GitHub OAuth
# Required for: User login/logout, session management, protecting API routes
#
# Setup Instructions:
# 1. Create an Auth0 account at https://auth0.com
# 2. Create a new "Regular Web Application"
# 3. Configure Allowed Callback URLs: http://localhost:3000/api/auth/callback
# 4. Configure Allowed Logout URLs: http://localhost:3000
# 5. Enable GitHub social connection in Authentication > Social
# 6. Copy Domain, Client ID, and Client Secret from your Auth0 application
# 7. Generate AUTH0_SECRET using: openssl rand -hex 32

# Your Auth0 tenant domain (found in Application settings)
# Format: your-tenant.us.auth0.com or your-custom-domain.com
AUTH0_DOMAIN=your-tenant.auth0.com

# OAuth Client ID (found in Application settings)
AUTH0_CLIENT_ID=your_auth0_client_id

# OAuth Client Secret (found in Application settings)
# Security: Keep this secret secure. Never commit it to git.
AUTH0_CLIENT_SECRET=your_auth0_client_secret

# Secret used to encrypt session cookies (generate with: openssl rand -hex 32)
# Security: Must be at least 32 characters. Generate a new one for each environment.
AUTH0_SECRET=generate_using_openssl_rand_hex_32

# Base URL of your application
# Development: http://localhost:3000
# Production: https://yourdomain.com
APP_BASE_URL=http://localhost:3000

# OAuth scopes requested from Auth0
# Default: openid profile email (sufficient for most use cases)
AUTH0_SCOPE=openid profile email

# Optional: Auth0 API audience (only needed if calling Auth0 Management API)
# AUTH0_AUDIENCE=

# ============================================================================
# Snowflake Database Configuration
# ============================================================================
# Snowflake is used to store scan results, repository metadata, and user data
# Required for: Persisting scan results, caching, historical data
#
# Setup Instructions:
# 1. Create a Snowflake account at https://signup.snowflake.com/
# 2. Create a database and warehouse in your Snowflake console
# 3. Run the SQL script at scripts/init-snowflake.sql to create the required tables
# 4. Copy your connection details below
#
# Costs: Snowflake has usage-based pricing. Use the smallest warehouse size (X-Small)
#        for development to minimize costs. Monitor usage at https://app.snowflake.com/

# Snowflake account identifier
# Format: <account_locator>.<region_id> (e.g., ab12345.us-east-1)
# Find this in your Snowflake console URL or account admin settings
SNOWFLAKE_ACCOUNT=your_account.region

# Snowflake username (case-sensitive)
# This is the user you created in Snowflake, not your email
SNOWFLAKE_USERNAME=your_username

# Snowflake password
# Security: Keep this password secure. Never commit it to git.
# Consider using role-based access and key-pair authentication in production
SNOWFLAKE_PASSWORD=your_password

# Virtual warehouse name (used for compute resources)
# Recommended for dev: X-Small warehouse to minimize costs
# Case-sensitive: must match exactly as created in Snowflake
SNOWFLAKE_WAREHOUSE=your_warehouse

# Database name where tables are stored
# Created during Snowflake setup or via init-snowflake.sql script
# Case-sensitive: must match exactly as created in Snowflake
SNOWFLAKE_DATABASE=your_database

# Schema name (usually PUBLIC for default setup)
# All OpenSafe tables are created in this schema
SNOWFLAKE_SCHEMA=PUBLIC

# ============================================================================
# Scan Optimization Controls (Optional)
# ============================================================================
# These flags control performance optimizations that reduce token usage for trusted repos
# Useful for development/testing when you want to force scan
#
# Production recommendation: Keep both set to 'true' to avoid scanning unncessarily

# Skip AI scans for popular repositories (1000+ stars)
# Rationale: High-star repos are heavily scrutinized and less likely to contain malware
# Set to 'false' to force AI scans even on popular repos (increases Gemini API costs)
# Default: true
ENABLE_STAR_THRESHOLD_CHECK=true

# Return cached results for repositories that haven't changed since last scan
# Rationale: If commits haven't changed, the scan results are still valid
# Set to 'false' to force fresh scans even when repo is unchanged (increases API costs)
# Default: true
ENABLE_UNCHANGED_REPO_CHECK=true